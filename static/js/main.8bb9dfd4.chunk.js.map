{"version":3,"sources":["EverestPerson.svg","components/presentational/Project.tsx","pages/About.tsx","components/presentational/StyledLink.tsx","pages/Home.tsx","components/FormProject/FormProject.tsx","pages/CreateListing.tsx","pages/Proposal.tsx","pages/Proposals.tsx","constants/projects.tsx","pages/Applications.tsx","pages/Application.tsx","pages/Services.tsx","pages/Infrastructure.tsx","pages/Content.tsx","components/stateful/ENSFetch.tsx","pages/ENS.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Project","props","twitter","website","name","description","twitterUrl","twitterHandleDisplay","className","href","target","rel","aboutData","tagline","type","About","StyledLink","to","label","Home","src","everestPerson","alt","FormGeneric","children","NewProjectSchema","Yup","shape","min","max","required","url","FormProject","initialValues","validationSchema","onSubmit","values","actions","console","log","alert","JSON","stringify","setSubmitting","render","status","isSubmitting","htmlFor","id","placeholder","component","msg","disabled","CreateListing","Proposal","slug","useParams","Proposals","match","applicationTypes","infrastructureTypes","serviceTypes","contentTypes","applications","initialState","DeFi","DAOs","games","social","DEX","collectibles","reducer","state","action","Error","Applications","useReducer","dispatch","map","index","key","applicationType","checked","onChange","e","Application","arrayIndex","parseInt","application","Services","filter","toLowerCase","Infrastructure","Content","EXCHANGE_RATES","gql","ENSFetch","useQuery","loading","error","data","domains","ENS","client","ApolloClient","uri","AppRouter","path","exact","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bb9dfd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EverestPerson.b83557ef.svg\";","// TODO: Decide whether to fetch data for this project at a higher level and pass into this component, or whehter to fetch it here\n// For now assuming it will be a prop already here\n\nimport React from \"react\";\nimport { ProjectInterface } from \"../../types/ProjectInterface\";\n\nconst Project: React.FC<ProjectInterface> = props => {\n  // TODO: Use type or tagline?\n  const { twitter, website, name, description } = props;\n  const twitterUrl = `https://twitter.com/${twitter}`;\n  const twitterHandleDisplay = `@${twitter}`;\n  return (\n    <div>\n      <h2>{name === \"Everest\" ? \"About\" : name}</h2>\n      <p>\n        <b>Description:</b> {description}\n      </p>\n      <p>\n        <b>Website:</b>{\" \"}\n        {name === \"Everest\" ? (\n          \"You're on it dummy\"\n        ) : (\n          <a\n            className=\"App-link\"\n            href={website}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {website}\n          </a>\n        )}\n      </p>\n      <p>\n        <b>Twitter:</b>{\" \"}\n        <a\n          className=\"App-link\"\n          href={twitterUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {twitterHandleDisplay}\n        </a>\n      </p>\n    </div>\n  );\n};\n\nexport default Project;\n","import React from \"react\";\nimport Project from \"../components/presentational/Project\";\n\nconst aboutData = {\n  name: \"Everest\",\n  description:\n    \"universally shared ‘yellowpages’ registry for eth community. we use fancy tech like TCRs and bonding curves. we’re hiring. dm @EverestProject. we probably won’t respond. if we collaborate, we can line up all our ducks in a row.\",\n  twitter: \"\",\n  website: \"\",\n  tagline: \"\",\n  type: \"\"\n};\n\nexport default function About() {\n  return (\n    <Project\n      name={aboutData.name}\n      tagline={aboutData.tagline}\n      website={aboutData.website}\n      twitter={aboutData.twitter}\n      description={aboutData.description}\n      type={aboutData.type}\n    />\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function StyledLink(props: any) {\n  return (\n    <b>\n      <Link className=\"App-link\" to={props.to}>\n        {props.label}\n      </Link>\n    </b>\n  );\n}\n","import React from \"react\";\nimport everestPerson from \"../EverestPerson.svg\";\nimport StyledLink from \"../components/presentational/StyledLink\";\n// import {\n//   applicationTypes,\n//   infrastructureTypes,\n//   serviceTypes,\n//   contentTypes\n// } from \"../constants/projects\";\n\nexport default function Home() {\n  return (\n    <div>\n      <h2>Everest</h2>\n      <img src={everestPerson} className=\"App-logo\" alt=\"Person on Everest\" />\n      {/* TODO: Maybe DRY these four sections up with a map */}\n      <h3>\n        <StyledLink to={`/applications`} label={\"Applications\"} />\n      </h3>\n      {/* {applicationTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/applications?type=${filter}`} label={name} />\n          </p>\n        );\n      })} */}\n      <h3>\n        <StyledLink to={`/infrastructure`} label={\"Infrastructure\"} />\n      </h3>\n      {/* {infrastructureTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/infrastructure?type=${filter}`} label={name} />\n          </p>\n        );\n      })} */}\n      <h3>\n        <StyledLink to={`/services`} label={\"Services\"} />\n      </h3>\n      {/* {serviceTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/services?type=${filter}`} label={name} />\n          </p>\n        );\n      })} */}\n      <h3>\n        <StyledLink to={`/content`} label={\"Content\"} />\n      </h3>\n      {/* {contentTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/content?type=${filter}`} label={name} />\n          </p>\n        );\n      })} */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { ProjectInterface } from \"../../types/ProjectInterface\";\n\nimport \"./FormProject.css\";\n\nconst FormGeneric: React.FC<{ children: any }> = props => {\n  return <div className={\"container\"}>{props.children}</div>;\n};\n\nconst NewProjectSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  website: Yup.string()\n    .url()\n    .required(\"Required\"),\n  twitter: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  description: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(1000, \"Too Long!\")\n});\n\nconst FormProject: React.FC<{}> = () => {\n  const initialValues: ProjectInterface = {\n    name: \"\",\n    website: \"https://\",\n    twitter: \"\",\n    description: \"\",\n    type: \"\",\n    tagline: \"\"\n  };\n  return (\n    <FormGeneric>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={NewProjectSchema}\n        onSubmit={(values, actions) => {\n          console.log({ values, actions });\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }}\n        render={({ status, isSubmitting }) => (\n          <Form>\n            <label htmlFor=\"name\">Name</label>\n            <Field type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n            <label htmlFor=\"website\">Website</label>\n            <Field\n              type=\"text\"\n              id=\"website\"\n              name=\"website\"\n              placeholder=\"https://\"\n            />\n            <ErrorMessage name=\"website\" component=\"div\" />\n            <label htmlFor=\"twitter\">twitter</label>\n            <Field\n              type=\"text\"\n              id=\"twitter\"\n              name=\"twitter\"\n              placeholder=\"@jack\"\n            />\n            <ErrorMessage name=\"twitter\" component=\"div\" />\n            <label htmlFor=\"description\">Description</label>\n            <Field\n              type=\"text\"\n              component=\"textarea\"\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"This project...\"\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n\n            {status && status.msg && <div>{status.msg}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </FormGeneric>\n  );\n};\n\nexport default FormProject;\n","import React from \"react\";\nimport FormProject from \"../components/FormProject/FormProject\";\n\nexport default function CreateListing() {\n  return (\n    <div>\n      <h2>Create a listing</h2>\n      <FormProject />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Proposal() {\n  let { slug } = useParams();\n  return <div>Now showing proposal {slug}</div>;\n}\n","import React from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\n\nexport default function Proposals({ match }: any) {\n  return (\n    <div>\n      <h2>Proposals</h2>\n\n      <p>\n        <StyledLink to={`${match.url}/1`} label={\"Project 1\"} />\n      </p>\n      <p>\n        <StyledLink to={`${match.url}/2`} label={\"Project 2\"} />\n      </p>\n    </div>\n  );\n}\n","// Subtypes of each category\n\nexport const applicationTypes = [\n  \"DeFi\",\n  \"DAOs\",\n  \"games\",\n  \"social\",\n  \"DEX\",\n  \"collectibles\"\n];\n\nexport const infrastructureTypes = [\n  \"development framework\",\n  \"sidechains\",\n  \"user authentication\",\n  \"state channels\",\n  \"onboarding\",\n  \"testing\"\n];\n\nexport const serviceTypes = [\n  \"audits\",\n  \"development\",\n  \"legal\",\n  \"design\",\n  \"accounting\",\n  \"PR\"\n];\n\nexport const contentTypes = [\"podcasts\", \"wikis\", \"events\", \"forums\", \"news\"];\n\n// The projects themselves:\nexport const applications = [\n  {\n    name: \"MetaCartel DAO\",\n    type: \"DAO\",\n    tagline: \"we like dapps\",\n    website: \"https://www.metacartel.org/\",\n    twitter: \"meta_cartel\",\n    description: \"we like dapps\"\n  },\n  {\n    name: \"PokeMol\",\n    type: \"DAO\",\n    tagline: \"pocket moloch\",\n    website: \"\",\n    twitter: \"PocketMoloch\",\n    description:\n      \"Open Source Mobile-first @MolochDAO frontend with @abridged_io contract wallets ftw. By @odyssyautomaton\"\n  },\n  {\n    name: \"Compound\",\n    type: \"DeFi\",\n    tagline: \"Interest and borrowing, for the open financial system.\",\n    website: \"https://compound.finance/\",\n    twitter: \"compoundfinance\",\n    description:\n      \"Compound is an open-source, autonomous protocol built for developers, to unlock a universe of new financial applications. Interest and borrowing, for the open financial system.\"\n  },\n  {\n    name: \"Mintbase\",\n    type: \"collectibles\",\n    tagline: \"Digital assets minted and backed by you\",\n    website: \"https://mintbase.io/\",\n    twitter: \"mintbase\",\n    description: \"Digital assets minted and backed by you\"\n  },\n  {\n    name: \"Pepper 4D\",\n    type: \"games\",\n    tagline: \"gang gang gang\",\n    website: \"\",\n    twitter: \"\",\n    description: \"\"\n  },\n  {\n    name: \"FrAnK\",\n    type: \"social\",\n    tagline: \"what you looking at bish\",\n    website: \"\",\n    twitter: \"\",\n    description: \"\"\n  },\n  {\n    name: \"YoloRekt\",\n    type: \"games\",\n    tagline: \"we're definitely a finance game, not a casino\",\n    website: \"\",\n    twitter: \"\",\n    description: \"\"\n  }\n];\n","import React, { useReducer } from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\nimport { applicationTypes, applications } from \"../constants/projects\";\n\n// TODO: Generalize this component to work for services, infrastructure, and content too, and just pass a type prop in\n\n// TODO: Make dynamic\ninterface FilterState {\n  DAOs: boolean;\n  DeFi: boolean;\n  games: boolean;\n  social: boolean;\n  DEX: boolean;\n  collectibles: boolean;\n}\n\nconst initialState: FilterState = {\n  DeFi: true,\n  DAOs: true,\n  games: true,\n  social: true,\n  DEX: true,\n  collectibles: true\n};\n\nfunction reducer(state: any, action: any) {\n  switch (action.type) {\n    // TODO: Build these cases programmatically\n    case \"DeFi\":\n      return {\n        ...state,\n        ...{\n          DeFi: !state.DeFi\n        }\n      };\n    case \"DAOs\":\n      return {\n        ...state,\n        ...{\n          DAOs: !state.DAOs\n        }\n      };\n    case \"games\":\n      return {\n        ...state,\n        ...{\n          games: !state.games\n        }\n      };\n    case \"DEX\":\n      return {\n        ...state,\n        ...{\n          DEX: !state.DEX\n        }\n      };\n    case \"social\":\n      return {\n        ...state,\n        ...{\n          social: !state.social\n        }\n      };\n    case \"collectibles\":\n      return {\n        ...state,\n        ...{\n          collectibles: !state.collectibles\n        }\n      };\n    default:\n      throw new Error();\n  }\n}\n\nexport default function Applications({ match }: any) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n      <h1>Applications</h1>\n      {applications.map(({ name }, index) => {\n        return (\n          <p key={index}>\n            <StyledLink to={`/applications/${index}`} label={name} />\n          </p>\n        );\n      })}\n      <h3>Filters</h3>\n\n      <form>\n        {applicationTypes.map((applicationType, index) => (\n          <label key={index}>\n            {applicationType}\n            <input\n              name={applicationType}\n              type=\"checkbox\"\n              // TODO: Make checked use state\n              checked={state[applicationType]}\n              onChange={e => {\n                console.log(e.target);\n\n                const action = `${applicationType}`;\n                dispatch({ type: applicationType });\n                // setEnabledTypes(e.target.value);\n              }}\n            />\n          </label>\n        ))}\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Project from \"../components/presentational/Project\";\nimport { applications } from \"../constants/projects\";\n\nexport default function Application() {\n  const { slug } = useParams();\n  console.log({ slug });\n  const indexString = slug ? slug : \"0\";\n  const arrayIndex = parseInt(indexString);\n  console.log({ arrayIndex });\n  const application = applications[arrayIndex];\n  console.log(application);\n  return (\n    <Project\n      name={application.name}\n      tagline={application.tagline}\n      website={application.website}\n      twitter={application.twitter}\n      description={application.description}\n      type={application.type}\n    />\n  );\n}\n","import React from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\nimport { serviceTypes } from \"../constants/projects\";\n\n// TODO: Generalize this component to work for services, infrastructure, and content too, and just pass a type prop in\n\nexport default function Services({ match }: any) {\n  return (\n    <div>\n      <h2>Services</h2>\n\n      {/* TODO: Maybe DRY this up with the mapping from the home page */}\n      {serviceTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/services?type=${filter}`} label={name} />\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\nimport { infrastructureTypes } from \"../constants/projects\";\n\n// TODO: Generalize this component to work for services, infrastructure, and content too, and just pass a type prop in\n\nexport default function Infrastructure({ match }: any) {\n  return (\n    <div>\n      <h2>Infrastructure</h2>\n\n      {/* TODO: Maybe DRY this up with the mapping from the home page */}\n      {infrastructureTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/infrastructure?type=${filter}`} label={name} />\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\nimport { contentTypes } from \"../constants/projects\";\n\n// TODO: Generalize this component to work for services, infrastructure, and content too, and just pass a type prop in\n\nexport default function Content({ match }: any) {\n  return (\n    <div>\n      <h2>Content</h2>\n\n      {/* TODO: Maybe DRY this up with the mapping from the home page */}\n      {contentTypes.map((name, index) => {\n        const filter = name.toLowerCase();\n        return (\n          <p key={name}>\n            <StyledLink to={`/content?type=${filter}`} label={name} />\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst EXCHANGE_RATES = gql`\n  {\n    domains(first: 10) {\n      name\n    }\n  }\n`;\n\nexport default function ENSFetch() {\n  const { loading, error, data } = useQuery(EXCHANGE_RATES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.domains.map(({ name }: any) => (\n    <div key={name}>\n      <p>{name}</p>\n    </div>\n  ));\n}\n","import React from \"react\";\nimport ENSFetch from \"../components/stateful/ENSFetch\";\nexport default function ENS() {\n  return (\n    <div>\n      <h2>ENS names from The Graph</h2>\n      <ENSFetch />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport About from \"./pages/About\";\nimport Home from \"./pages/Home\";\nimport CreateListing from \"./pages/CreateListing\";\nimport Proposal from \"./pages/Proposal\";\nimport Proposals from \"./pages/Proposals\";\nimport Applications from \"./pages/Applications\";\nimport Application from \"./pages/Application\";\nimport Services from \"./pages/Services\";\nimport Infrastructure from \"./pages/Infrastructure\";\nimport Content from \"./pages/Content\";\nimport ENS from \"./pages/ENS\";\n\nimport StyledLink from \"./components/presentational/StyledLink\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/ensdomains/ens\"\n});\n\nfunction AppRouter() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <nav>\n            <p>\n              <StyledLink to=\"/\" label={\"Home\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/create-listing/\" label={\"Create a listing\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/proposals\" label={\"View proposals\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/about/\" label={\"About\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/ens/\" label={\"ENS data from The Graph\"} />\n            </p>\n          </nav>\n          <header className=\"App-header\">\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/create-listing/\" component={CreateListing} />\n              {/* Note: Proposal must be before proposals */}\n              <Route path=\"/proposals/:slug\" component={Proposal} />\n              <Route path=\"/proposals/\" component={Proposals} />\n              {/* Note: Application must be before applications */}\n              <Route path=\"/applications/:slug\" component={Application} />\n              <Route path=\"/applications/\" component={Applications} />\n              <Route path=\"/services/\" component={Services} />\n              <Route path=\"/infrastructure/\" component={Infrastructure} />\n              <Route path=\"/content/\" component={Content} />\n              <Route path=\"/about/\" component={About} />\n              <Route path=\"/ens/\" component={ENS} />\n            </Switch>\n          </header>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}