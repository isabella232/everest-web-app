{"version":3,"sources":["EverestPerson.svg","pages/About.tsx","pages/Home.tsx","components/FormProject/FormProject.tsx","pages/CreateListing.tsx","pages/Proposal.tsx","components/presentational/StyledLink.tsx","pages/Proposals.tsx","components/stateful/ENSFetch.tsx","pages/ENS.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","About","className","href","target","rel","Home","src","everestPerson","alt","FormGeneric","props","children","NewProjectSchema","Yup","shape","name","min","max","required","website","url","twitter","description","FormProject","initialValues","validationSchema","onSubmit","values","actions","console","log","alert","JSON","stringify","setSubmitting","render","status","isSubmitting","htmlFor","type","id","placeholder","component","msg","disabled","CreateListing","Proposal","slug","useParams","StyledLink","to","label","Proposals","match","EXCHANGE_RATES","gql","ENSFetch","useQuery","loading","error","data","domains","map","key","ENS","client","ApolloClient","uri","AppRouter","path","exact","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e8cb65f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/EverestPerson.b83557ef.svg\";","import React from \"react\";\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n      <p>\n        <b>Description:</b> universally shared ‘yellowpages’ registry for eth\n        community. we use fancy tech like TCRs and bonding curves. we’re hiring.\n        dm @dhole_club. we probably won’t respond. if we collaborate, we can\n        line up all our ducks in a row.\n      </p>\n      <p>\n        <b>Website:</b> You're on it dummy\n      </p>\n      <p>\n        <b>Twitter:</b>{\" \"}\n        <a\n          className=\"App-link\"\n          href=\"https://twitter.com/dhole_club\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          @dhole_club\n        </a>\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport everestPerson from \"../EverestPerson.svg\";\n\nexport default function Home() {\n  return (\n    <div>\n      <h2>Everest</h2>\n      <img src={everestPerson} className=\"App-logo\" alt=\"Person on Everest\" />\n      <h3>Applications</h3>\n      <p>DeFi</p>\n      <h3>Infrastructure</h3>\n      <h3>Services</h3>\n      <h3>Content</h3>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport \"./FormProject.css\";\n\nconst FormGeneric: React.FC<{ children: any }> = props => {\n  return <div className={\"container\"}>{props.children}</div>;\n};\n\n// name\n// category\n// website\n// twitter\n// description\n\ninterface FormProjectValues {\n  name: string;\n  website: string;\n  twitter: string;\n  description: string;\n}\n\nconst NewProjectSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  website: Yup.string()\n    .url()\n    .required(\"Required\"),\n  twitter: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n  description: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(1000, \"Too Long!\")\n});\n\nconst FormProject: React.FC<{}> = () => {\n  const initialValues: FormProjectValues = {\n    name: \"\",\n    website: \"https://\",\n    twitter: \"\",\n    description: \"\"\n  };\n  return (\n    <FormGeneric>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={NewProjectSchema}\n        onSubmit={(values, actions) => {\n          console.log({ values, actions });\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }}\n        render={({ status, isSubmitting }) => (\n          <Form>\n            <label htmlFor=\"name\">Name</label>\n            <Field type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n            <label htmlFor=\"website\">Website</label>\n            <Field\n              type=\"text\"\n              id=\"website\"\n              name=\"website\"\n              placeholder=\"https://\"\n            />\n            <ErrorMessage name=\"website\" component=\"div\" />\n            <label htmlFor=\"twitter\">twitter</label>\n            <Field\n              type=\"text\"\n              id=\"twitter\"\n              name=\"twitter\"\n              placeholder=\"@jack\"\n            />\n            <ErrorMessage name=\"twitter\" component=\"div\" />\n            <label htmlFor=\"description\">Description</label>\n            <Field\n              type=\"text\"\n              component=\"textarea\"\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"This project...\"\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n\n            {status && status.msg && <div>{status.msg}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </FormGeneric>\n  );\n};\n\nexport default FormProject;\n","import React from \"react\";\nimport FormProject from \"../components/FormProject/FormProject\";\n\nexport default function CreateListing() {\n  return (\n    <div>\n      <h2>Create a listing</h2>\n      <FormProject />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function Proposal() {\n  let { slug } = useParams();\n  return <div>Now showing proposal {slug}</div>;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function StyledLink(props: any) {\n  return (\n    <b>\n      <Link className=\"App-link\" to={props.to}>\n        {props.label}\n      </Link>\n    </b>\n  );\n}\n","import React from \"react\";\nimport StyledLink from \"../components/presentational/StyledLink\";\n\nexport default function Proposals({ match }: any) {\n  return (\n    <div>\n      <h2>Proposals</h2>\n\n      <p>\n        <StyledLink to={`${match.url}/1`} label={\"Project 1\"} />\n      </p>\n      <p>\n        <StyledLink to={`${match.url}/2`} label={\"Project 2\"} />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst EXCHANGE_RATES = gql`\n  {\n    domains(first: 10) {\n      name\n    }\n  }\n`;\n\nexport default function ENSFetch() {\n  const { loading, error, data } = useQuery(EXCHANGE_RATES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.domains.map(({ name }: any) => (\n    <div key={name}>\n      <p>{name}</p>\n    </div>\n  ));\n}\n","import React from \"react\";\nimport ENSFetch from \"../components/stateful/ENSFetch\";\nexport default function ENS() {\n  return (\n    <div>\n      <h2>ENS names from The Graph</h2>\n      <ENSFetch />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport About from \"./pages/About\";\nimport Home from \"./pages/Home\";\nimport CreateListing from \"./pages/CreateListing\";\nimport Proposal from \"./pages/Proposal\";\nimport Proposals from \"./pages/Proposals\";\nimport ENS from \"./pages/ENS\";\n\nimport StyledLink from \"./components/presentational/StyledLink\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/ensdomains/ens\"\n});\n\nfunction AppRouter() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <nav>\n            <p>\n              <StyledLink to=\"/\" label={\"Home\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/create-listing/\" label={\"Create a listing\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/proposals\" label={\"View proposals\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/about/\" label={\"About\"} />\n            </p>\n            <p>\n              <StyledLink to=\"/ens/\" label={\"ENS data from The Graph\"} />\n            </p>\n          </nav>\n          <header className=\"App-header\">\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/create-listing/\" component={CreateListing} />\n              <Route path=\"/proposals/:slug\" component={Proposal} />\n              <Route path=\"/proposals/\" component={Proposals} />\n              <Route path=\"/about/\" component={About} />\n              <Route path=\"/ens/\" component={ENS} />\n            </Switch>\n          </header>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}